import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:mobile_tech/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.blueGray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.lightGreen30001,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        displayLarge: TextStyle(
          color: colorScheme.errorContainer,
          fontSize: 64.fSize,
          fontFamily: 'Rammetto One',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.orange300,
          fontSize: 48.fSize,
          fontFamily: 'Potta One',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 36.fSize,
          fontFamily: 'Potta One',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 24.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: colorScheme.errorContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF9900),
    primaryContainer: Color(0X750A29CB),

    // Error colors
    errorContainer: Color(0X75000000),
    onError: Color(0XFFD37177),

    // On colors(text colors)
    onPrimary: Color(0X751400FF),
    onPrimaryContainer: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF010101);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray50 => Color(0XFFEBF2F0);

  // BlueGrayFc
  Color get blueGray50Fc => Color(0XFCEBF1EF);

  // Cyan
  Color get cyan30075 => Color(0X7543D9E3);
  Color get cyanA40075 => Color(0X750AE1FF);

  // Gray
  Color get gray800 => Color(0XFF495340);

  // Green
  Color get green70075 => Color(0X75119F41);
  Color get greenA70075 => Color(0X7505FF00);

  // Indigo
  Color get indigo200 => Color(0XFF8AA2E2);

  // LightBlue
  Color get lightBlue90075 => Color(0X75005EA3);

  // LightGreen
  Color get lightGreen300 => Color(0XFF9AF18C);
  Color get lightGreen30001 => Color(0XFF9AF28C);

  // LightGreenAf
  Color get lightGreenA2007f => Color(0X7FADF375);

  // Orange
  Color get orange300 => Color(0XFFFFB649);

  // Purple
  Color get purpleA40075 => Color(0X75FF02B8);
  Color get purpleA4007501 => Color(0X75F900FF);
  Color get purpleA70074 => Color(0X74BC00FF);

  // Red
  Color get red700 => Color(0XFFE51D1D);
  Color get red90075 => Color(0X75B02929);
  Color get redA20075 => Color(0X75FF6565);
  Color get redA70075 => Color(0X75FF0A0A);

  // Teal
  Color get teal200 => Color(0XFF8AE2CD);
  Color get tealA700 => Color(0XFF0ACBB4);

  // Yellow
  Color get yellow50075 => Color(0X75FFF740);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
